{
  "components": {
    "schemas": {
      "AccountsListResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Accounts",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountsListResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "AccountsListResponseSchema": {
        "properties": {
          "accounts": {
            "items": {
              "$ref": "#/components/schemas/GetAccountSchema"
            },
            "type": "array"
          },
          "groups": {
            "items": {
              "$ref": "#/components/schemas/GetGroupSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "AttachFBAccountDTO": {
        "properties": {
          "avatar": {
            "example": "https://storage.googleapis.com/2ad21ebc23/test",
            "type": "string"
          },
          "companyId": {
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          },
          "name": {
            "example": "JOHN_DEO",
            "type": "string"
          },
          "originId": {
            "example": "244405****11687",
            "type": "string"
          },
          "type": {
            "example": "page",
            "type": "object"
          }
        },
        "type": "object"
      },
      "AttachGMBLocationDTO": {
        "properties": {
          "account": {
            "type": "object"
          },
          "companyId": {
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          },
          "location": {
            "type": "object"
          }
        },
        "type": "object"
      },
      "AttachIGAccountDTO": {
        "properties": {
          "avatar": {
            "type": "string"
          },
          "companyId": {
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          },
          "name": {
            "example": "JOHN_DEO",
            "type": "string"
          },
          "originId": {
            "example": "244405****11687",
            "type": "string"
          },
          "pageId": {
            "example": "234234234242sd",
            "type": "string"
          }
        },
        "required": ["pageId"],
        "type": "object"
      },
      "AttachLinkedinAccountDTO": {
        "properties": {
          "avatar": {
            "type": "string"
          },
          "companyId": {
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          },
          "name": {
            "example": "JOHN_DEO",
            "type": "string"
          },
          "originId": {
            "example": "244405****11687",
            "type": "string"
          },
          "type": {
            "enum": ["page", "group", "profile", "location", "business"],
            "type": "string"
          },
          "urn": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "AttachTiktokAccountDTO": {
        "properties": {
          "avatar": {
            "type": "string"
          },
          "companyId": {
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          },
          "name": {
            "example": "JOHN_DEO",
            "type": "string"
          },
          "originId": {
            "example": "244405****11687",
            "type": "string"
          },
          "type": {
            "enum": ["page", "group", "profile", "location", "business"],
            "type": "string"
          },
          "username": {
            "example": "JOHN_DEO",
            "type": "string"
          },
          "verified": {
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "AttachTwitterAccountDTO": {
        "properties": {
          "avatar": {
            "type": "string"
          },
          "companyId": {
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          },
          "name": {
            "example": "JOHN_DEO",
            "type": "string"
          },
          "originId": {
            "example": "244405****11687",
            "type": "string"
          },
          "protected": {
            "example": true,
            "type": "boolean"
          },
          "username": {
            "example": "user_name",
            "type": "string"
          },
          "verified": {
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "BadRequestDTO": {
        "properties": {
          "message": {
            "example": "Bad Request",
            "type": "string"
          },
          "statusCode": {
            "example": 400,
            "type": "number"
          }
        },
        "type": "object"
      },
      "CSVDefaultDTO": {
        "properties": {
          "userId": {
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          }
        },
        "type": "object"
      },
      "CSVImportSchema": {
        "properties": {
          "_id": {
            "description": "Csv Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "type": "string"
          },
          "accountIds": {
            "description": "Account Ids",
            "example": ["aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "approver": {
            "description": "Approver Id",
            "example": "FSeSDsdfdf45Dgs4w3ssss",
            "type": "string"
          },
          "count": {
            "description": "Posts count",
            "example": 5,
            "type": "number"
          },
          "createdAt": {
            "description": "Date Created",
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "Created By Id",
            "example": "SDsdfdf45Dgs4w3ssss",
            "type": "string"
          },
          "file": {
            "description": "File path",
            "example": "File",
            "type": "string"
          },
          "fileName": {
            "description": "File Name",
            "example": "sample.csv",
            "type": "string"
          },
          "locationId": {
            "description": "locationId",
            "example": "iVrVJ2uoXNF0wzcBzgl5",
            "type": "string"
          },
          "originId": {
            "description": "Origin Id",
            "example": "FSeSDsdfdf45Dgs4w3ssss",
            "type": "string"
          },
          "status": {
            "description": "status must be one of the following values: pending, in_progress, completed, failed, in_review, importing, deleted",
            "example": "completed",
            "type": "string"
          },
          "traceId": {
            "description": "Trace Id",
            "example": "FSeSDsdfdf45Dgs4w3ssss",
            "type": "string"
          }
        },
        "required": ["_id"],
        "type": "object"
      },
      "CSVMediaResponseSchema": {
        "properties": {
          "aspectRatio": {
            "description": "Media Aspect Ratio",
            "example": 1.5,
            "type": "number"
          },
          "audioChannels": {
            "description": "Audio Channel",
            "example": 1,
            "type": "number"
          },
          "audioCodecName": {
            "description": "Audio Codec",
            "example": "aac",
            "type": "string"
          },
          "displayAspectRatio": {
            "description": "Display Aspect Ratio",
            "example": "250 : 167",
            "type": "string"
          },
          "duration": {
            "description": "Media Aspect Ratio",
            "example": 60,
            "type": "number"
          },
          "error": {
            "description": "Error",
            "example": "Image is larger than 10MB",
            "type": "string"
          },
          "facebookError": {
            "description": "Facebook media error. It can be one of the following errors: imageSize, imageType, videoDuration, videoSize",
            "example": "videoDuration",
            "type": "string"
          },
          "format": {
            "description": "Media format",
            "example": "jpg",
            "type": "string"
          },
          "frameRate": {
            "description": "Video Frame Rate",
            "example": 21,
            "type": "number"
          },
          "frames": {
            "description": "List of frames",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "gmbError": {
            "description": "GMB media error. It can be one of the following errors: imageSize, imageDimension, imageType",
            "example": "imageDimension",
            "type": "string"
          },
          "height": {
            "description": "Media Height",
            "example": 500,
            "type": "number"
          },
          "instagramError": {
            "description": "Instagram media error. It can we one of the following errors: imageSize, imageType, imageAspectRatio, videoType, videoDuration, videoSize, videoAspectRatio, videoWidthHeight, audioCodec, audioCodecChannels, videoCodec, videoFrameRate",
            "example": "imageSize",
            "type": "string"
          },
          "invalidError": {
            "description": "Media error. It can be one of the following values: imageSize, imageWidth",
            "example": "imageSize",
            "type": "string"
          },
          "linkedinError": {
            "description": "LinkedIn media error. It can be one of the following errors: imageSize, imageType, videoType, videoDuration, videoSize",
            "example": "imageType",
            "type": "string"
          },
          "selectedPoster": {
            "description": "Selected Poster",
            "example": 0,
            "type": "number"
          },
          "size": {
            "description": "Media Size",
            "example": 18362,
            "type": "number"
          },
          "tiktokBusinessError": {
            "description": "Tikok Business media error. It can be one of the following errors: videoType, videoDuration, videoSize, videoWidthHeight, videoCodec, videoFrameRate",
            "example": "videoType",
            "type": "string"
          },
          "tiktokError": {
            "description": "Tiktok media error. It can be one of the following errors: videoType, videoDuration, videoSize, videoWidthHeight, videoCodec, videoFrameRate",
            "example": "videoFrameRate",
            "type": "string"
          },
          "twitterError": {
            "description": "Twitter media error. It can be one of the following errors: imageSize, videoType, videoDuration, videoSize",
            "example": "videoSize",
            "type": "string"
          },
          "type": {
            "description": "Media Type",
            "example": "image/webp",
            "type": "string"
          },
          "url": {
            "description": "Media Url",
            "example": "https://storage.googleapis.com/ghl-test/omaDY3RbWtTP511e808O/media/38e53059-b92706571605.png",
            "type": "string"
          },
          "videoCodecName": {
            "description": "Video Codec",
            "example": "h264",
            "type": "string"
          },
          "width": {
            "description": "Media Width",
            "example": 500,
            "type": "number"
          }
        },
        "type": "object"
      },
      "CSVPostSchema": {
        "properties": {
          "accountIds": {
            "description": "Account Ids",
            "example": ["aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "errorMessage": {
            "description": "Error Description",
            "type": "string"
          },
          "followUpComment": {
            "example": "Initial Comment",
            "type": "string"
          },
          "gmbPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GMBPostSchema"
              }
            ],
            "description": "GMB Post Details"
          },
          "link": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IOgTagsSchema"
              }
            ],
            "description": "OG Tag"
          },
          "medias": {
            "description": "Post Media List",
            "items": {
              "$ref": "#/components/schemas/CSVMediaResponseSchema"
            },
            "type": "array"
          },
          "scheduleDate": {
            "example": "2022-11-23T05:53:00.000Z",
            "type": "string"
          },
          "summary": {
            "example": "First post",
            "type": "string"
          },
          "tiktokPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TiktokPostSchema"
              }
            ],
            "description": "Tiktok Post Details"
          },
          "type": {
            "example": "post",
            "type": "object"
          }
        },
        "type": "object"
      },
      "CSVResponseSchema": {
        "properties": {
          "csv": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CsvResponse"
              }
            ],
            "description": "CSV Data"
          }
        },
        "type": "object"
      },
      "CategorySchema": {
        "properties": {
          "_id": {
            "description": "ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "Created By User",
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "deleted": {
            "description": "Deleted Value",
            "example": false,
            "type": "boolean"
          },
          "locationId": {
            "description": "Location ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "name": {
            "description": "Category Name",
            "example": "Primary",
            "type": "string"
          },
          "primaryColor": {
            "description": "Color For Category",
            "example": "#FFFFFF",
            "type": "string"
          },
          "secondaryColor": {
            "description": "Secondary Color",
            "example": "#FFFFFF",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["deleted"],
        "type": "object"
      },
      "CreatePostDTO": {
        "properties": {
          "accountIds": {
            "description": "Account Ids",
            "example": ["aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "categoryId": {
            "description": "Category Id",
            "example": "65f151c99bc2bf3aaf970d72",
            "type": "string"
          },
          "createdBy": {
            "description": "Created By",
            "type": "string"
          },
          "followUpComment": {
            "description": "Follow Up Comment on platform. It is not allowed on Tiktok and GMB accounts and there is a limit of 280 charecters for twitter account",
            "example": "First comment",
            "type": "string"
          },
          "gmbPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GMBPostSchema"
              }
            ],
            "description": "GMB Post Details"
          },
          "media": {
            "description": "Post Media Data \n The limitations of media as per the platforms is provided through the reference link in API description",
            "items": {
              "$ref": "#/components/schemas/PostMediaSchema"
            },
            "type": "array"
          },
          "ogTagsDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OgTagsSchema"
              }
            ],
            "description": "Og Tags Meta Data"
          },
          "postApprovalDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostApprovalSchema"
              }
            ],
            "description": "Post Approval Details"
          },
          "scheduleDate": {
            "description": "Schedule Date",
            "type": "string"
          },
          "scheduleTimeUpdated": {
            "description": "if schedule datetime is updated",
            "example": true,
            "type": "boolean"
          },
          "status": {
            "description": "Status must be one of the following values: null, in_progress, draft, failed, published, scheduled, in_review, notification_sent, deleted",
            "example": "draft",
            "type": "object"
          },
          "summary": {
            "description": "Post Content \n The limitations of content as per the platforms is provided through the reference link in API description. The summary will be trimmed based on the limit",
            "example": "Hello World",
            "type": "string"
          },
          "tags": {
            "description": "Array of Tag Value",
            "example": ["65f151c99bc2bf3aaf970d72"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tiktokPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TiktokPostSchema"
              }
            ],
            "description": "Tiktok Post Details"
          },
          "type": {
            "description": "Post Type must be one of the following values: - post, story, reel",
            "example": "post",
            "type": "object"
          },
          "userId": {
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "CreatePostSuccessfulResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Created Post",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CreatePostSuccessfulResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "CreatePostSuccessfulResponseSchema": {
        "properties": {
          "post": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetPostFormattedSchema"
              }
            ],
            "description": "Post Data"
          }
        },
        "type": "object"
      },
      "CsvPostStatusResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Updated Successfully",
            "type": "string"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "CsvResponse": {
        "properties": {
          "accountIds": {
            "description": "Account Ids",
            "example": ["aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "approver": {
            "example": "FSeSDsdfdf45Dgs4w3ssss",
            "type": "string"
          },
          "count": {
            "example": 5,
            "type": "number"
          },
          "createdBy": {
            "example": "AccountId_SDsdfdf45Dgs4w3ssss",
            "type": "string"
          },
          "file": {
            "example": "File",
            "type": "string"
          },
          "fileName": {
            "example": "File Name",
            "type": "string"
          },
          "locationId": {
            "example": "Location Name",
            "type": "string"
          },
          "originId": {
            "example": "FSeSDsdfdf45Dgs4w3ssss",
            "type": "string"
          },
          "status": {
            "description": "status must be one of the following values: pending, in_progress, completed, failed, in_review, importing, deleted",
            "example": "completed",
            "type": "object"
          },
          "traceId": {
            "example": "FSeSDsdfdf45Dgs4w3ssss",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DateSchema": {
        "properties": {
          "day": {
            "example": 1,
            "type": "number"
          },
          "month": {
            "example": 1,
            "type": "number"
          },
          "year": {
            "example": 2022,
            "type": "number"
          }
        },
        "required": ["year", "month", "day"],
        "type": "object"
      },
      "DeleteAccountResponseSchema": {
        "properties": {
          "id": {
            "description": "Id",
            "example": "65fac446d599990d1313c1dd",
            "type": "string"
          },
          "locationId": {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "type": "string"
          }
        },
        "type": "object"
      },
      "DeleteCsvResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Deleted Post",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CSVResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "DeletePostResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Deleted Post",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeletePostResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "DeletePostResponseSchema": {
        "properties": {
          "postId": {
            "description": "Post Id",
            "type": "string"
          }
        },
        "required": ["postId"],
        "type": "object"
      },
      "DeletePostSuccessfulResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Deleted Post",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeletePostSuccessfulResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "DeletePostSuccessfulResponseSchema": {
        "properties": {
          "postId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "EndDateSchema": {
        "properties": {
          "endDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateSchema"
              }
            ],
            "description": "End Date"
          },
          "endTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeSchema"
              }
            ],
            "description": "End Time"
          }
        },
        "type": "object"
      },
      "FacebookPageSchema": {
        "properties": {
          "avatar": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "id": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "isConnected": {
            "example": true,
            "type": "boolean"
          },
          "isOwned": {
            "example": true,
            "type": "boolean"
          },
          "name": {
            "example": "FB Page",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FormatedApprovalDetails": {
        "properties": {
          "approvalStatus": {
            "description": "Approval Status must be one of the following values: pending, approved, rejected, not_required",
            "example": "approved",
            "type": "object"
          },
          "approver": {
            "description": "Approver",
            "example": "iVrVJ2uoXNF0wzcBzgl5",
            "type": "string"
          },
          "approverNote": {
            "description": "Approver Notes",
            "example": "Test suggestion",
            "type": "string"
          },
          "approverUser": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostUserSchema"
              }
            ],
            "description": "Approver User Details"
          },
          "requesterNote": {
            "description": "Requester Notes",
            "example": "Test suggestion",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GMBPostSchema": {
        "properties": {
          "actionType": {
            "description": "Action Type must be one of the following values: none, order, book, shop, learn_more, call, sign_up",
            "example": "book",
            "type": "object"
          },
          "couponCode": {
            "description": "Coupon Code",
            "example": "BOGO-50",
            "type": "string"
          },
          "endDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/EndDateSchema"
              }
            ],
            "description": "End Date"
          },
          "gmbEventType": {
            "description": "gmbEventType must be one of the following values: STANDARD, EVENT, OFFER",
            "example": "STANDARD",
            "type": "string"
          },
          "offerTitle": {
            "description": "Offer Title",
            "example": "Hey",
            "type": "string"
          },
          "redeemOnlineUrl": {
            "description": "Redeem Online Url",
            "example": "https://google.com",
            "type": "string"
          },
          "startDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StartDateSchema"
              }
            ],
            "description": "Start Date"
          },
          "termsConditions": {
            "description": "Terms Condition Url",
            "example": "https://google.com/privacy",
            "type": "string"
          },
          "title": {
            "description": "Title",
            "example": "Event Title",
            "type": "string"
          },
          "url": {
            "description": "Url",
            "example": "https://google.com",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetAccountSchema": {
        "properties": {
          "expire": {
            "example": "2024-03-11T19:29:59.785Z",
            "type": "string"
          },
          "id": {
            "example": "aF3KhyL8JIuBwzK3m7Ly_Lx1EI6YIgQYMQi0ytFXv_12554616564525983496",
            "type": "string"
          },
          "isExpired": {
            "example": false,
            "type": "boolean"
          },
          "meta": {
            "example": {
              "canDelete": true,
              "hasGoogleUpdated": true
            },
            "type": "object"
          },
          "name": {
            "example": "Sample Account",
            "type": "string"
          },
          "oauthId": {
            "example": "aF3KhyL8JIuBwzK3m7Ly",
            "type": "string"
          },
          "platform": {
            "description": "platform must be one of the following values: google, facebook, instagram, linkedin, twitter, tiktok",
            "example": "google",
            "type": "string"
          },
          "profileId": {
            "example": "aF3KhyL8JIuBwzK3m7Ly",
            "type": "string"
          },
          "type": {
            "example": "location",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GetByIdResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Category",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetCategorySchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetByIdResponseSchema": {
        "properties": {
          "_id": {
            "description": "ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "Created By User",
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "deleted": {
            "description": "Deleted Value",
            "example": false,
            "type": "boolean"
          },
          "locationId": {
            "description": "Location ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "message": {
            "description": "Message",
            "example": "Category not found",
            "type": "string"
          },
          "name": {
            "description": "Category Name",
            "example": "Primary",
            "type": "string"
          },
          "primaryColor": {
            "description": "Color For Category",
            "example": "#32a852",
            "type": "string"
          },
          "secondaryColor": {
            "description": "Secondary Color",
            "example": "#32a852",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": ["deleted"],
        "type": "object"
      },
      "GetByLocationIdResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Categories by Location ID",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetByLocationIdResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetByLocationIdResponseSchema": {
        "properties": {
          "categories": {
            "description": "Meta Data",
            "items": {
              "$ref": "#/components/schemas/CategorySchema"
            },
            "type": "array"
          },
          "count": {
            "description": "Count",
            "example": 3,
            "type": "number"
          }
        },
        "required": ["count", "categories"],
        "type": "object"
      },
      "GetCategorySchema": {
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetByIdResponseSchema"
              }
            ],
            "description": "Category Schema"
          }
        },
        "type": "object"
      },
      "GetCsvPostResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched CSV Post",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetCsvPostResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetCsvPostResponseSchema": {
        "properties": {
          "count": {
            "example": 6,
            "type": "number"
          },
          "csv": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CSVImportSchema"
              }
            ],
            "description": "CSV Data"
          },
          "posts": {
            "description": "CSV Posts",
            "items": {
              "$ref": "#/components/schemas/CSVPostSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetFacebookAccountsResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Facebook Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetFacebookAccountsSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetFacebookAccountsSchema": {
        "properties": {
          "pages": {
            "description": "Facebook Pages Details",
            "items": {
              "$ref": "#/components/schemas/FacebookPageSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetGoogleLocationAccountSchema": {
        "properties": {
          "locations": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetGoogleLocationSchema"
              }
            ],
            "description": "Locations"
          }
        },
        "type": "object"
      },
      "GetGoogleLocationResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Google Business Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetGoogleLocationAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetGoogleLocationSchema": {
        "properties": {
          "account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GoogleAccountsSchema"
              }
            ],
            "description": "Google Account Details"
          },
          "location": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GoogleLocationSchema"
              }
            ],
            "description": "Google Location Details"
          }
        },
        "type": "object"
      },
      "GetGroupSchema": {
        "properties": {
          "accountIds": {
            "example": ["6494063f4260855c1c5776b5_mhoUgTPkz19vjF5Qu7Av_2774080328752823730"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Group Id",
            "example": "6284c43d519161e96cc09c13",
            "type": "string"
          },
          "name": {
            "description": "name of group",
            "example": "Primary",
            "type": "string"
          }
        },
        "required": ["id", "name", "accountIds"],
        "type": "object"
      },
      "GetInstagramAccountsResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Instagram Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetInstagramAccountsSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetInstagramAccountsSchema": {
        "properties": {
          "accounts": {
            "description": "Instagram Account Details",
            "items": {
              "$ref": "#/components/schemas/InstagramAccountSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetLinkedInAccountSchema": {
        "properties": {
          "pages": {
            "description": "LinkedIn Pages",
            "items": {
              "$ref": "#/components/schemas/LinkedInPageSchema"
            },
            "type": "array"
          },
          "profile": {
            "description": "LinkedIn Profile Details",
            "items": {
              "$ref": "#/components/schemas/LinkedInProfileSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetLinkedInAccountsResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched LinkedIn Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetLinkedInAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetPostFormattedSchema": {
        "properties": {
          "_id": {
            "example": "61bb16833b3f2791f9715be2",
            "type": "string"
          },
          "accountId": {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "type": "string"
          },
          "accountIds": {
            "description": "Account Ids",
            "example": ["aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createdAt": {
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "displayDate": {
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "error": {
            "description": "Error",
            "example": "Failed due to auth token",
            "type": "string"
          },
          "gmbPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GMBPostSchema"
              }
            ],
            "description": "GMB Post Details"
          },
          "locationId": {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "type": "string"
          },
          "media": {
            "description": "Post Media Data \n The limitations of media as per the platforms is provided through the reference link in API description",
            "items": {
              "$ref": "#/components/schemas/PostMediaSchema"
            },
            "type": "array"
          },
          "ogTagsDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OgTagsSchema"
              }
            ],
            "description": "Og Tags Meta Data"
          },
          "platform": {
            "description": "platform must be one of the following values: google, facebook, instagram, linkedin, twitter, tiktok",
            "example": "google",
            "type": "string"
          },
          "postApprovalDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FormatedApprovalDetails"
              }
            ],
            "description": "Post Approval Details"
          },
          "postId": {
            "example": "323534534435",
            "type": "string"
          },
          "publishedAt": {
            "example": "2021-06-22T05:32:49.463Z",
            "type": "string"
          },
          "source": {
            "description": "source must be one of the following values: composer, recurring, csv",
            "enum": ["composer", "csv", "recurring", "review", "rss"],
            "example": "composer",
            "type": "string"
          },
          "status": {
            "description": "Status must be one of the following values: in_progress, draft, failed, published, scheduled, in_review, notification_sent, deleted",
            "example": "published",
            "type": "object"
          },
          "summary": {
            "example": "Sample Summary",
            "type": "string"
          },
          "tags": {
            "description": "Tag Ids",
            "example": ["aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tiktokPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TiktokPostSchema"
              }
            ],
            "description": "Tiktok Post Details"
          },
          "type": {
            "description": "Post Type must be one of the following values: - post, story, reel",
            "example": "post",
            "type": "object"
          },
          "updatedAt": {
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostUserSchema"
              }
            ],
            "description": "User"
          }
        },
        "required": ["locationId", "error", "type"],
        "type": "object"
      },
      "GetPostSuccessfulResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Post",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetPostSuccessfulResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetPostSuccessfulResponseSchema": {
        "properties": {
          "post": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetPostFormattedSchema"
              }
            ],
            "description": "Post Data"
          }
        },
        "type": "object"
      },
      "GetTagsByIdResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Tags by Tag IDs",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTagsByIdResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetTagsByIdResponseSchema": {
        "properties": {
          "count": {
            "description": "Count",
            "example": 3,
            "type": "number"
          },
          "tags": {
            "description": "Social Media Tag Data",
            "items": {
              "$ref": "#/components/schemas/SocialMediaTagSchema"
            },
            "type": "array"
          }
        },
        "required": ["tags"],
        "type": "object"
      },
      "GetTagsByLocationIdResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Tags by Location ID",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTagsByLocationIdResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetTagsByLocationIdResponseSchema": {
        "properties": {
          "count": {
            "description": "Count",
            "example": 3,
            "type": "number"
          },
          "tags": {
            "description": "Tags Data",
            "items": {
              "$ref": "#/components/schemas/SocialMediaTagSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetTiktokAccountResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Tiktok Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTiktokAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetTiktokAccountSchema": {
        "properties": {
          "profile": {
            "description": "Tiktok Business Account",
            "items": {
              "$ref": "#/components/schemas/TiktokProfileSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetTiktokBusinessAccountResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Tiktok Business Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTiktokBusinessAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetTiktokBusinessAccountSchema": {
        "properties": {
          "profile": {
            "description": "Tiktok Profile",
            "items": {
              "$ref": "#/components/schemas/TiktokProfileSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetTwitterAccountsResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Twitter Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetTwitterAccountsSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetTwitterAccountsSchema": {
        "properties": {
          "profile": {
            "description": "Twitter Profile Details",
            "items": {
              "$ref": "#/components/schemas/TwitterProfileSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "GetUploadStatusResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched CSV Upload Status",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GetUploadStatusResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "GetUploadStatusResponseSchema": {
        "properties": {
          "count": {
            "example": 6,
            "type": "number"
          },
          "csvs": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CSVImportSchema"
              }
            ],
            "description": "CSV Data"
          }
        },
        "required": ["csvs", "count"],
        "type": "object"
      },
      "GoogleAccountsSchema": {
        "properties": {
          "accountName": {
            "example": "Account Name Test",
            "type": "string"
          },
          "name": {
            "example": "accounts/114659701071209971352",
            "type": "string"
          },
          "type": {
            "example": "PERSONAL",
            "type": "string"
          },
          "verificationState": {
            "example": "UNVERIFIED",
            "type": "string"
          },
          "vettedState": {
            "example": "NOT_VETTED",
            "type": "string"
          }
        },
        "type": "object"
      },
      "GoogleLocationSchema": {
        "properties": {
          "isConnected": {
            "example": true,
            "type": "boolean"
          },
          "isVerified": {
            "example": true,
            "type": "boolean"
          },
          "maxLocation": {
            "example": true,
            "type": "boolean"
          },
          "metadata": {
            "description": "Meta data not related to User",
            "example": {},
            "type": "object"
          },
          "name": {
            "example": "accounts/114659701071209971352",
            "type": "string"
          },
          "relationshipData": {
            "description": "All locations and chain related to this one",
            "example": {},
            "type": "object"
          },
          "storeCode": {
            "example": "w37swmmLbA02zgqKPpxITe",
            "type": "string"
          },
          "storefrontAddress": {
            "description": "Store front address",
            "example": {},
            "type": "object"
          },
          "title": {
            "example": "Location Title",
            "type": "string"
          }
        },
        "type": "object"
      },
      "IOgTagsSchema": {
        "properties": {
          "error": {
            "description": "Og Tag Error",
            "example": "InvalidLink",
            "type": "string"
          },
          "ogDescription": {
            "description": "Tag description",
            "example": "Social media as we know it has barely",
            "type": "string"
          },
          "ogImage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OgImageSchema"
              }
            ],
            "description": "Tag description"
          },
          "ogSiteName": {
            "description": "Site Name",
            "example": "Knowledge at Wharton",
            "type": "string"
          },
          "ogTitle": {
            "description": "Tag Title",
            "example": "The Impact of Social Media: Is it Irreplaceable?",
            "type": "string"
          },
          "ogUrl": {
            "description": "Tag Url",
            "example": "https://knowledge.wharton.upenn.edu/article/impact-of-social-media/",
            "type": "string"
          },
          "url": {
            "description": "Tag url",
            "example": "https://knowledge.wharton.upenn.edu/article/impact-of-social-media/",
            "type": "string"
          }
        },
        "type": "object"
      },
      "InstagramAccountSchema": {
        "properties": {
          "avatar": {
            "example": "avau37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "id": {
            "example": "idu37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "isConnected": {
            "example": true,
            "type": "boolean"
          },
          "name": {
            "example": "Insta account",
            "type": "string"
          },
          "pageId": {
            "example": "pidu37swmmLbA02zgqKPpxITe2",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LinkedInPageSchema": {
        "properties": {
          "avatar": {
            "description": "Profile Avatar url",
            "example": "w37swmmLbA02zgqKPpxITe",
            "type": "string"
          },
          "id": {
            "description": "Page ID",
            "example": "w37swmmLbA02zgqKPpxITe",
            "type": "string"
          },
          "isConnected": {
            "description": "is connected to app",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "LinkedIn Page Name",
            "example": "Sample Name",
            "type": "string"
          },
          "urn": {
            "description": "URN",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LinkedInProfileSchema": {
        "properties": {
          "avatar": {
            "description": "Profile avatar",
            "example": "w37swmmLbA02zgqKPpxITe",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "type": "string"
          },
          "isConnected": {
            "description": "is connected to app",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "Name of profile",
            "example": "Profile Name",
            "type": "string"
          },
          "urn": {
            "description": "URN",
            "type": "string"
          }
        },
        "type": "object"
      },
      "LocationAndAccountDeleteResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Deleted Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DeleteAccountResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "OgImageSchema": {
        "properties": {
          "height": {
            "description": "Image height",
            "example": 400,
            "type": "number"
          },
          "type": {
            "description": "Image Type",
            "example": "image/jpg",
            "type": "string"
          },
          "url": {
            "description": "Image url",
            "example": "https://knowledge.wharton.upenn.edu/wp-content/uploads/2019/07/072619_socialmedia_phonelikes-600x440.jpg",
            "type": "string"
          },
          "width": {
            "description": "Image width",
            "example": 400,
            "type": "number"
          }
        },
        "type": "object"
      },
      "OgTagsSchema": {
        "properties": {
          "metaImage": {
            "description": "Meta Image",
            "example": "https://wwww.lifeofanarchitect.com/wp-content/uploads/2021/10/architectural-model-making-stairs.jpg",
            "type": "string"
          },
          "metaLink": {
            "description": "Meta Link",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostApprovalSchema": {
        "properties": {
          "approvalStatus": {
            "description": "Approval Status must be one of the following values: pending, approved, rejected, not_required",
            "example": "approved",
            "type": "object"
          },
          "approver": {
            "description": "Approver",
            "example": "iVrVJ2uoXNF0wzcBzgl5",
            "type": "string"
          },
          "approverNote": {
            "description": "Approver Notes",
            "example": "Test suggestion",
            "type": "string"
          },
          "requesterNote": {
            "description": "Requester Notes",
            "example": "Test suggestion",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PostCreateRequest": {
        "properties": {
          "accountIds": {
            "description": "Account Ids",
            "example": ["aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "categoryId": {
            "description": "Category Id",
            "type": "string"
          },
          "createdBy": {
            "description": "Created By",
            "type": "string"
          },
          "followUpComment": {
            "description": "Follow Up Comment on platform. It is not allowed on Tiktok and GMB accounts and there is a limit of 280 charecters for twitter account",
            "example": "First comment",
            "type": "string"
          },
          "gmbPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GMBPostSchema"
              }
            ],
            "description": "GMB Post Details"
          },
          "media": {
            "description": "Post Media Data \n The limitations of media as per the platforms is provided through the reference link in API description",
            "items": {
              "$ref": "#/components/schemas/PostMediaSchema"
            },
            "type": "array"
          },
          "ogTagsDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/OgTagsSchema"
              }
            ],
            "description": "Og Tags Meta Data"
          },
          "postApprovalDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostApprovalSchema"
              }
            ],
            "description": "Post Approval Details"
          },
          "scheduleDate": {
            "description": "Schedule Date",
            "type": "string"
          },
          "scheduleTimeUpdated": {
            "description": "if schedule datetime is updated",
            "example": true,
            "type": "boolean"
          },
          "status": {
            "description": "Status must be one of the following values: in_progress, draft, failed, published, scheduled, in_review, notification_sent, deleted",
            "example": "draft",
            "type": "object"
          },
          "summary": {
            "description": "Post Content \n The limitations of content as per the platforms is provided through the reference link in API description",
            "example": "Hello World",
            "type": "string"
          },
          "tags": {
            "description": "Array of Tag Value",
            "example": ["Tag1"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "tiktokPostDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TiktokPostSchema"
              }
            ],
            "description": "Tiktok Post Details"
          },
          "type": {
            "description": "Post Type must be one of the following values: - post, story, reel",
            "example": "post",
            "type": "object"
          },
          "userId": {
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          }
        },
        "required": ["type"],
        "type": "object"
      },
      "PostMediaSchema": {
        "properties": {
          "caption": {
            "example": "Caption 1",
            "type": "string"
          },
          "defaultThumb": {
            "example": "https://storage.googleapis.com/test/test/media/test.jpeg",
            "type": "string"
          },
          "id": {
            "example": "Edf3323fsfsdsd",
            "type": "string"
          },
          "thumbnail": {
            "example": "https://storage.googleapis.com/test/test/media/test.jpeg",
            "type": "string"
          },
          "type": {
            "example": "video/mp4 or image/png",
            "type": "string"
          },
          "url": {
            "example": "https://i0.wp.com/www.lifeofanarchitect.com/wp-content/uploads/2021/10/architectural-model-making-stairs.jpg",
            "type": "string"
          }
        },
        "required": ["url"],
        "type": "object"
      },
      "PostSuccessfulResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Fetched Posts",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PostSuccessfulResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "PostSuccessfulResponseSchema": {
        "properties": {
          "count": {
            "example": 6,
            "type": "number"
          },
          "posts": {
            "description": "Post Data",
            "items": {
              "$ref": "#/components/schemas/GetPostFormattedSchema"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PostUserSchema": {
        "properties": {
          "email": {
            "description": "Email Id",
            "example": "abc@xyc.com",
            "type": "string"
          },
          "firstName": {
            "description": "First name",
            "example": "Harry",
            "type": "string"
          },
          "id": {
            "description": "User Id",
            "example": "6284c43d519161e96cc09c13",
            "type": "string"
          },
          "lastName": {
            "description": "Last name",
            "example": "Spencer",
            "type": "string"
          },
          "phone": {
            "description": "Phone number",
            "example": "901111119",
            "type": "string"
          },
          "profilePhoto": {
            "description": "Profile photo",
            "example": "https://storage.googleapis.com/user/kCrjKGHZQ2/profile/1dca8c-61c9-404d-a459-751fbcb.jpeg",
            "type": "string"
          },
          "title": {
            "description": "Title",
            "example": "Mr",
            "type": "string"
          }
        },
        "required": ["id", "title", "firstName", "lastName", "profilePhoto", "phone", "email"],
        "type": "object"
      },
      "SearchPostDTO": {
        "properties": {
          "accounts": {
            "description": "List of account Ids seperated by comma as a string",
            "example": "660a83fc29deacac50033e2b_omaDY3RbWtTP511e808O_17841465964543589, 38bF83fc29deacac50033e2b_omaDY3RbWtr3P11e808O_17841465964543998",
            "type": "string"
          },
          "fromDate": {
            "description": "From Date",
            "example": "2024-01-22T05:32:49.463Z",
            "type": "string"
          },
          "includeUsers": {
            "description": "Include User Data",
            "example": "true",
            "type": "string"
          },
          "limit": {
            "default": "10",
            "example": "10",
            "type": "string"
          },
          "postType": {
            "description": "Post Type must be one of the following values: - post, story, reel",
            "example": "post",
            "type": "object"
          },
          "skip": {
            "default": "0",
            "example": "1",
            "type": "string"
          },
          "toDate": {
            "description": "To Date",
            "example": "2024-03-20T05:32:49.463Z",
            "type": "string"
          },
          "type": {
            "default": "all",
            "description": "type must be one of the following values: recent, all, scheduled, draft, failed, in_review, published, in_progress and deleted",
            "example": "Filter type",
            "type": "string"
          }
        },
        "required": ["skip", "limit", "fromDate", "toDate", "includeUsers"],
        "type": "object"
      },
      "SetAccountsDTO": {
        "properties": {
          "accountIds": {
            "description": "Account Ids",
            "example": ["aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "approver": {
            "example": "o6241QsiRwUIJHyjuhos",
            "type": "string"
          },
          "fileName": {
            "description": "Name of file",
            "example": "test.csv",
            "type": "string"
          },
          "filePath": {
            "description": "File path",
            "example": "o6241QsiRwUIJHyjuhos/social-planner-import/a6d04a26-0401-4e52-8f48-dbb274050fab.csv",
            "type": "string"
          },
          "rowsCount": {
            "description": "Entires Count. rowcCount must be between 1 and number of posts in CSV",
            "example": 1,
            "type": "number"
          },
          "userId": {
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "type": "string"
          }
        },
        "required": ["accountIds", "filePath", "rowsCount", "fileName"],
        "type": "object"
      },
      "SetAccountsResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Accounts Set Successfully",
            "type": "string"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "SocialGoogleMediaAccountSchema": {
        "properties": {
          "_id": {
            "example": "65f2d989a4f2f1e5322c3856",
            "type": "string"
          },
          "active": {
            "example": true,
            "type": "boolean"
          },
          "avatar": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "createdAt": {
            "description": "created date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "meta": {
            "example": {
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "isVerified": "true",
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "avatar": "u37swmmLbA02zgqKPpxITe2",
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name"
              },
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "protected": true,
              "storeCode": "122",
              "storefrontAddress": {
                "addressLines": ["207", "county"],
                "administrativeArea": "Down Town",
                "languageCode": "E001",
                "locality": "Louis Street",
                "postalCode": "1221",
                "regionCode": "30021"
              },
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "verified": true
            },
            "type": "object"
          },
          "name": {
            "example": "Account Name",
            "type": "string"
          },
          "oAuthId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "oldId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "originId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "platform": {
            "example": "google",
            "type": "object"
          },
          "type": {
            "example": "location",
            "type": "object"
          },
          "updatedAt": {
            "description": "updated date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocialMediaFBAccountResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Added Facebook Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaFacebookAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "SocialMediaFacebookAccountSchema": {
        "properties": {
          "_id": {
            "example": "65f2d989a4f2f1e5322c3856",
            "type": "string"
          },
          "active": {
            "example": true,
            "type": "boolean"
          },
          "avatar": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "createdAt": {
            "description": "created date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "meta": {
            "example": {
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "isVerified": "true",
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "avatar": "u37swmmLbA02zgqKPpxITe2",
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name"
              },
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "protected": true,
              "storeCode": "122",
              "storefrontAddress": {
                "addressLines": ["207", "county"],
                "administrativeArea": "Down Town",
                "languageCode": "E001",
                "locality": "Louis Street",
                "postalCode": "1221",
                "regionCode": "30021"
              },
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "verified": true
            },
            "type": "object"
          },
          "name": {
            "example": "Account Name",
            "type": "string"
          },
          "oAuthId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "oldId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "originId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "platform": {
            "example": "facebook",
            "type": "object"
          },
          "type": {
            "description": "type value must be page",
            "example": "page",
            "type": "object"
          },
          "updatedAt": {
            "description": "updated date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocialMediaGmbAccountResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Added Google Business Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialGoogleMediaAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "SocialMediaInstagramAccountResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Added Instagram Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaInstagramAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "SocialMediaInstagramAccountSchema": {
        "properties": {
          "_id": {
            "example": "65f2d989a4f2f1e5322c3856",
            "type": "string"
          },
          "active": {
            "example": true,
            "type": "boolean"
          },
          "avatar": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "createdAt": {
            "description": "created date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "meta": {
            "example": {
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "isVerified": "true",
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "avatar": "u37swmmLbA02zgqKPpxITe2",
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name"
              },
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "protected": true,
              "storeCode": "122",
              "storefrontAddress": {
                "addressLines": ["207", "county"],
                "administrativeArea": "Down Town",
                "languageCode": "E001",
                "locality": "Louis Street",
                "postalCode": "1221",
                "regionCode": "30021"
              },
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "verified": true
            },
            "type": "object"
          },
          "name": {
            "example": "Profile Name",
            "type": "string"
          },
          "oAuthId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "oldId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "originId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "platform": {
            "example": "instagram",
            "type": "object"
          },
          "type": {
            "example": "profile",
            "type": "object"
          },
          "updatedAt": {
            "description": "updated date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocialMediaLinkedInAccountResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Added LinkedIn Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaLinkedInAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "SocialMediaLinkedInAccountSchema": {
        "properties": {
          "_id": {
            "example": "65f2d989a4f2f1e5322c3856",
            "type": "string"
          },
          "active": {
            "example": true,
            "type": "boolean"
          },
          "avatar": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "createdAt": {
            "description": "created date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "meta": {
            "example": {
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "isVerified": "true",
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "avatar": "u37swmmLbA02zgqKPpxITe2",
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name"
              },
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "protected": true,
              "storeCode": "122",
              "storefrontAddress": {
                "addressLines": ["207", "county"],
                "administrativeArea": "Down Town",
                "languageCode": "E001",
                "locality": "Louis Street",
                "postalCode": "1221",
                "regionCode": "30021"
              },
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "verified": true
            },
            "type": "object"
          },
          "name": {
            "example": "Profile Name",
            "type": "string"
          },
          "oAuthId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "oldId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "originId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "platform": {
            "example": "linkedin",
            "type": "object"
          },
          "type": {
            "description": "type must be one of the following values: page, profile",
            "example": "profile",
            "type": "object"
          },
          "updatedAt": {
            "description": "updated date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocialMediaTagSchema": {
        "properties": {
          "_id": {
            "description": "ID",
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "createdAt": {
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "description": "Created By User Id",
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "deleted": {
            "description": "Deleted boolean value",
            "example": false,
            "type": "boolean"
          },
          "locationId": {
            "description": "Location Id",
            "example": "Lx1EI6YIgQYMQi0ytFXv",
            "type": "string"
          },
          "tag": {
            "description": "Tag Name",
            "example": "Primary Tag",
            "type": "string"
          },
          "updatedAt": {
            "example": "2023-08-02T00:00:00.000Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocialMediaTiktokAccountResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Added Tiktok Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaTiktokAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "SocialMediaTiktokAccountSchema": {
        "properties": {
          "_id": {
            "example": "65f2d989a4f2f1e5322c3856",
            "type": "string"
          },
          "active": {
            "example": true,
            "type": "boolean"
          },
          "avatar": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "createdAt": {
            "description": "created date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "meta": {
            "example": {
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "isVerified": "true",
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "avatar": "u37swmmLbA02zgqKPpxITe2",
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name"
              },
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "protected": true,
              "storeCode": "122",
              "storefrontAddress": {
                "addressLines": ["207", "county"],
                "administrativeArea": "Down Town",
                "languageCode": "E001",
                "locality": "Louis Street",
                "postalCode": "1221",
                "regionCode": "30021"
              },
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "verified": true
            },
            "type": "object"
          },
          "name": {
            "example": "Account Name",
            "type": "string"
          },
          "oAuthId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "oldId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "originId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "platform": {
            "example": "tiktok",
            "type": "object"
          },
          "type": {
            "description": "type must be one of the following values: profile, business",
            "example": "profile",
            "type": "object"
          },
          "updatedAt": {
            "description": "updated date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SocialMediaTwitterAccountResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Added Twitter Account",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SocialMediaTwitterAccountSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "SocialMediaTwitterAccountSchema": {
        "properties": {
          "_id": {
            "example": "65f2d989a4f2f1e5322c3856",
            "type": "string"
          },
          "active": {
            "example": true,
            "type": "boolean"
          },
          "avatar": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "createdAt": {
            "description": "created date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          },
          "deleted": {
            "example": true,
            "type": "boolean"
          },
          "locationId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "meta": {
            "example": {
              "accountId": "u37swmmLbA02zgqKPpxITe2",
              "isVerified": "true",
              "locationId": "u37swmmLbA02zgqKPpxITe2",
              "openId": "u37swmmLbA02zgqKPpxITe2",
              "page": {
                "avatar": "u37swmmLbA02zgqKPpxITe2",
                "id": "u37swmmLbA02zgqKPpxITe2",
                "name": "Account Name"
              },
              "pageId": "u37swmmLbA02zgqKPpxITe2",
              "protected": true,
              "storeCode": "122",
              "storefrontAddress": {
                "addressLines": ["207", "county"],
                "administrativeArea": "Down Town",
                "languageCode": "E001",
                "locality": "Louis Street",
                "postalCode": "1221",
                "regionCode": "30021"
              },
              "urn": "u37swmmLbA02zgqKPpxITe2",
              "username": "testUser",
              "verified": true
            },
            "type": "object"
          },
          "name": {
            "example": "Profile Name",
            "type": "string"
          },
          "oAuthId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "oldId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "originId": {
            "example": "u37swmmLbA02zgqKPpxITe2",
            "type": "string"
          },
          "platform": {
            "example": "twitter",
            "type": "object"
          },
          "type": {
            "example": "profile",
            "type": "object"
          },
          "updatedAt": {
            "description": "updated date",
            "example": "2024-03-14T11:03:37.015Z",
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StartDateSchema": {
        "properties": {
          "startDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateSchema"
              }
            ],
            "description": "Start Date"
          },
          "startTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TimeSchema"
              }
            ],
            "description": "Start Time"
          }
        },
        "type": "object"
      },
      "TiktokPostSchema": {
        "properties": {
          "enableComment": {
            "description": "enable comment",
            "example": true,
            "type": "boolean"
          },
          "enableDuet": {
            "description": "enable duet",
            "example": true,
            "type": "boolean"
          },
          "enableStitch": {
            "description": "enable stitch",
            "example": true,
            "type": "boolean"
          },
          "privacyLevel": {
            "description": "privacy level is an enum and must be one of the following values: PUBLIC_TO_EVERYONE, MUTUAL_FOLLOW_FRIENDS, SELF_ONLY",
            "example": "PUBLIC_TO_EVERYONE",
            "type": "object"
          },
          "promoteOtherBrand": {
            "description": "promote other brand",
            "example": true,
            "type": "boolean"
          },
          "promoteYourBrand": {
            "description": "promote your brand",
            "example": true,
            "type": "boolean"
          },
          "videoDisclosure": {
            "description": "video disclosure",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TiktokProfileSchema": {
        "properties": {
          "avatar": {
            "description": "Avatar of profile account",
            "example": "w37swmmLbA02zgqKPpxITe",
            "type": "string"
          },
          "id": {
            "description": "Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "type": "string"
          },
          "isConnected": {
            "description": "Is connected",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "Name of account",
            "example": "Account Name",
            "type": "string"
          },
          "type": {
            "description": "Tiktok Account Type must be one of the following values: business, profile",
            "example": "BUSINESS",
            "type": "object"
          },
          "username": {
            "description": "Username of account",
            "example": "User_name",
            "type": "string"
          },
          "verified": {
            "description": "Is verified",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "TimeSchema": {
        "properties": {
          "hours": {
            "example": 23,
            "type": "number"
          },
          "minutes": {
            "example": 56,
            "type": "number"
          },
          "seconds": {
            "example": 34,
            "type": "number"
          }
        },
        "required": ["hours", "minutes", "seconds"],
        "type": "object"
      },
      "TwitterProfileSchema": {
        "properties": {
          "avatar": {
            "description": "Avatar of profile",
            "example": "ZHl1OWpfZEMyeWc5UjJOOU51RVNOal",
            "type": "string"
          },
          "id": {
            "description": "ID of profile",
            "example": "ZHl1OWpfZEMyeWc5UjJOOU51RVNOal",
            "type": "string"
          },
          "isConnected": {
            "description": "Is connected",
            "example": true,
            "type": "boolean"
          },
          "name": {
            "description": "Name of profile",
            "example": "Twitter Account name",
            "type": "string"
          },
          "protected": {
            "description": "Is protected",
            "example": true,
            "type": "boolean"
          },
          "username": {
            "description": "Username of profile",
            "example": "sample_user",
            "type": "string"
          },
          "verified": {
            "description": "Is verified",
            "example": true,
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "UnauthorizedDTO": {
        "properties": {
          "error": {
            "example": "Unauthorized",
            "type": "string"
          },
          "message": {
            "example": "Invalid token: access token is invalid",
            "type": "string"
          },
          "statusCode": {
            "example": 401,
            "type": "number"
          }
        },
        "type": "object"
      },
      "UnprocessableDTO": {
        "properties": {
          "error": {
            "example": "Unprocessable Entity",
            "type": "string"
          },
          "message": {
            "example": ["Unprocessable Entity"],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "statusCode": {
            "example": 422,
            "type": "number"
          }
        },
        "type": "object"
      },
      "UpdatePostSuccessfulResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Updated Post",
            "type": "string"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 200,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "UpdateTagDTO": {
        "properties": {
          "tagIds": {
            "description": "Array of Tag Ids",
            "example": ["65fbdcfecc884f07e645ea8b"],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": ["tagIds"],
        "type": "object"
      },
      "UploadCSVDTO": {
        "properties": {
          "file": {
            "format": "binary",
            "type": "string"
          }
        },
        "type": "object"
      },
      "UploadFileResponseDTO": {
        "properties": {
          "message": {
            "description": "Message",
            "example": "Uploaded CSV",
            "type": "string"
          },
          "results": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UploadFileResponseSchema"
              }
            ],
            "description": "Requested Results"
          },
          "statusCode": {
            "description": "Status Code",
            "example": 201,
            "type": "number"
          },
          "success": {
            "description": "Success or Failure",
            "example": true,
            "type": "boolean"
          }
        },
        "required": ["success", "statusCode", "message"],
        "type": "object"
      },
      "UploadFileResponseSchema": {
        "properties": {
          "fileName": {
            "example": "CSV Import Sample - CSV Import Sample.csv",
            "type": "string"
          },
          "filePath": {
            "example": "omaDY3RbWtTP511e/social-import/d23d68c2-82c0-1db6e2.csv",
            "type": "string"
          },
          "rowsCount": {
            "example": 6,
            "type": "number"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "Agency-Access": {
        "bearerFormat": "JWT",
        "description": "Use the Access Token generated with user type as Agency.",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      },
      "Location-Access": {
        "bearerFormat": "JWT",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      },
      "bearer": {
        "bearerFormat": "JWT",
        "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
        "in": "header",
        "name": "Authorization",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {},
    "description": "Documentation for Social Media Posting API",
    "title": "Social Media Posting API",
    "version": "1.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/social-media-posting/oauth/facebook/start": {
      "get": {
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Facebook login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"facebook\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Facebook account details using below API -\n  API: '/social-media-posting/oauth/facebook/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-facebook-oauth",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Facebook Account Id",
            "example": "u37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Facebook Page",
            "example": "integration",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reconnect boolean as string",
            "example": "true",
            "in": "query",
            "name": "reconnect",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Starts OAuth For Facebook Account",
        "tags": ["Oauth | Facebook"]
      }
    },
    "/social-media-posting/oauth/google/start": {
      "get": {
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Google login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"google\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Google account details using below API -\n  API: '/social-media-posting/oauth/google/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-google-oauth",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User Id",
            "example": "u37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page",
            "example": "integration",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reconnect",
            "example": "true",
            "in": "query",
            "name": "reconnect",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Starts OAuth For Google Account",
        "tags": ["Oauth | Google"]
      }
    },
    "/social-media-posting/oauth/instagram/start": {
      "get": {
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Instagram login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"instagram\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Instagram account details using below API -\n  API: '/social-media-posting/oauth/instagram/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-instagram-oauth",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User Id",
            "example": "u37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page",
            "example": "integration",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reconnect",
            "example": "true",
            "in": "query",
            "name": "reconnect",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Starts OAuth For Instagram Account",
        "tags": ["Oauth | Instagram"]
      }
    },
    "/social-media-posting/oauth/linkedin/start": {
      "get": {
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to LinkedIn login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"linkedin\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch LinkedIn account details using below API -\n  API: '/social-media-posting/oauth/linkedin/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-linkedin-oauth",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User Id",
            "example": "u37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page",
            "example": "integration",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reconnect",
            "example": "integration",
            "in": "query",
            "name": "reconnect",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Starts OAuth For LinkedIn Account",
        "tags": ["Oauth | LinkedIn"]
      }
    },
    "/social-media-posting/oauth/tiktok-business/start": {
      "get": {
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Tiktok-Business login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"tiktok-business\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Tiktok-Business account details using below API -\n  API: '/social-media-posting/oauth/tiktok-business/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-tiktok-business-oauth",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User Id",
            "example": "u37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page",
            "example": "integration",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reconnect",
            "example": "true",
            "in": "query",
            "name": "reconnect",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Starts OAuth For Tiktok Business Account",
        "tags": ["Oauth | Tiktok"]
      }
    },
    "/social-media-posting/oauth/tiktok/start": {
      "get": {
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Tiktok login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"tiktok\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Tiktok account details using below API -\n  API: '/social-media-posting/oauth/tiktok/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-tiktok-oauth",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User Id",
            "example": "u37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page",
            "example": "integration",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reconnect",
            "example": "true",
            "in": "query",
            "name": "reconnect",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Starts OAuth For Tiktok Account",
        "tags": ["Oauth | Tiktok"]
      }
    },
    "/social-media-posting/oauth/twitter/start": {
      "get": {
        "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Twitter login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"twitter\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Twitter account details using below API -\n  API: '/social-media-posting/oauth/twitter/accounts/:accountId' \n\n  Method: GET",
        "operationId": "start-twitter-oauth",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User Id",
            "example": "u37swmmLbA02zgqKPpxITe2",
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Page",
            "example": "integration",
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Reconnect",
            "example": "true",
            "in": "query",
            "name": "reconnect",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Starts OAuth For Twitter Account",
        "tags": ["Oauth | Twitter"]
      }
    },
    "/social-media-posting/oauth/{locationId}/facebook/accounts/{accountId}": {
      "get": {
        "description": "Get facebook pages",
        "operationId": "get-facebook-page-group",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetFacebookAccountsResponseDTO"
                }
              }
            },
            "description": "Successful response, runs Facebook OAuth and redirects to application"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get facebook pages",
        "tags": ["Oauth | Facebook"]
      },
      "post": {
        "description": "Attach facebook pages",
        "operationId": "attach-facebook-page-group",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFBAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaFBAccountResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Attach facebook pages",
        "tags": ["Oauth | Facebook"]
      }
    },
    "/social-media-posting/oauth/{locationId}/google/locations/{accountId}": {
      "get": {
        "description": "Get google business locations",
        "operationId": "get-google-locations",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGoogleLocationResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get google business locations",
        "tags": ["Oauth | Google"]
      },
      "post": {
        "description": "Set google business locations",
        "operationId": "set-google-locations",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachGMBLocationDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaGmbAccountResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Set google business locations",
        "tags": ["Oauth | Google"]
      }
    },
    "/social-media-posting/oauth/{locationId}/instagram/accounts/{accountId}": {
      "get": {
        "description": "Get Instagram Professional Accounts",
        "operationId": "get-instagram-page-group",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstagramAccountsResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Instagram Professional Accounts",
        "tags": ["Oauth | Instagram"]
      },
      "post": {
        "description": "Attach Instagram Professional Accounts",
        "operationId": "attach-instagram-page-group",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachIGAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaInstagramAccountResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Attach Instagram Professional Accounts",
        "tags": ["Oauth | Instagram"]
      }
    },
    "/social-media-posting/oauth/{locationId}/linkedin/accounts/{accountId}": {
      "get": {
        "description": "Get Linkedin pages and profile",
        "operationId": "get-linkedin-page-profile",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLinkedInAccountsResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Linkedin pages and profile",
        "tags": ["Oauth | LinkedIn"]
      },
      "post": {
        "description": "Attach linkedin pages and profile",
        "operationId": "attach-linkedin-page-profile",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachLinkedinAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaLinkedInAccountResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Attach linkedin pages and profile",
        "tags": ["Oauth | LinkedIn"]
      }
    },
    "/social-media-posting/oauth/{locationId}/tiktok-business/accounts/{accountId}": {
      "get": {
        "description": "Get Tiktok Business profile",
        "operationId": "get-tiktok-business-profile",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTiktokBusinessAccountResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Tiktok Business profile",
        "tags": ["Oauth | Tiktok"]
      }
    },
    "/social-media-posting/oauth/{locationId}/tiktok/accounts/{accountId}": {
      "get": {
        "description": "Get Tiktok profile",
        "operationId": "get-tiktok-profile",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTiktokAccountResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Tiktok profile",
        "tags": ["Oauth | Tiktok"]
      },
      "post": {
        "description": "Attach Tiktok profile",
        "operationId": "attach-tiktok-profile",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachTiktokAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaTiktokAccountResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Attach Tiktok profile",
        "tags": ["Oauth | Tiktok"]
      }
    },
    "/social-media-posting/oauth/{locationId}/twitter/accounts/{accountId}": {
      "get": {
        "description": "Get Twitter profile",
        "operationId": "get-twitter-profile",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTwitterAccountsResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Twitter profile",
        "tags": ["Oauth | Twitter"]
      },
      "post": {
        "description": "Attach Twitter profile",
        "operationId": "attach-twitter-profile",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Account Location Id",
            "example": "w37swmmLbA02zgqKPpxITe2",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Account Id",
            "example": "w37swmmLbA02zgqKPpxITe",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachTwitterAccountDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialMediaTwitterAccountResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Attach Twitter profile",
        "tags": ["Oauth | Twitter"]
      }
    },
    "/social-media-posting/{locationId}/accounts": {
      "get": {
        "description": "Get list of accounts and groups",
        "operationId": "get-account",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsListResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Accounts",
        "tags": ["Account"]
      }
    },
    "/social-media-posting/{locationId}/accounts/{id}": {
      "delete": {
        "description": "Delete account and account from group",
        "operationId": "delete-account",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Id",
            "example": "65fac446d599990d1313c1dd",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Company ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "in": "query",
            "name": "companyId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "in": "query",
            "name": "userId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationAndAccountDeleteResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete Account",
        "tags": ["Account"]
      }
    },
    "/social-media-posting/{locationId}/categories": {
      "get": {
        "operationId": "get-categories-location-id",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search text string",
            "example": "test",
            "in": "query",
            "name": "searchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit",
            "example": "10",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Skip",
            "example": "0",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByLocationIdResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get categories by location id",
        "tags": ["Category"]
      }
    },
    "/social-media-posting/{locationId}/categories/{id}": {
      "get": {
        "operationId": "get-categories-id",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Category Id",
            "example": "6284c43d519161e96cc09c13",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "6284c43d519161e96cc09c13",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetByIdResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get categories by id",
        "tags": ["Category"]
      }
    },
    "/social-media-posting/{locationId}/csv": {
      "get": {
        "operationId": "get-upload-status",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "1",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "default": "0",
              "type": "string"
            }
          },
          {
            "example": "10",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "default": "10",
              "type": "string"
            }
          },
          {
            "example": "true",
            "in": "query",
            "name": "includeUsers",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "User ID",
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "in": "query",
            "name": "userId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUploadStatusResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get Upload Status",
        "tags": ["CSV"]
      },
      "post": {
        "operationId": "upload-csv",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UploadCSVDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadFileResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Upload CSV",
        "tags": ["CSV"]
      }
    },
    "/social-media-posting/{locationId}/csv/{csvId}/post/{postId}": {
      "delete": {
        "operationId": "delete-csv-post",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "CSV Post Id",
            "example": "65f92e55cc884f0d0845e447",
            "in": "path",
            "name": "postId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "CSV Id",
            "example": "65f92e55cc884f0d0845e447",
            "in": "path",
            "name": "csvId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePostResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete CSV Post",
        "tags": ["CSV"]
      }
    },
    "/social-media-posting/{locationId}/csv/{id}": {
      "delete": {
        "operationId": "delete-csv",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "CSV Id",
            "example": "65f92e55cc884f0d0845e447",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCsvResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete CSV",
        "tags": ["CSV"]
      },
      "get": {
        "operationId": "get-csv-post",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "CSV Id",
            "example": "65f92e55cc884f0d0845e447",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "0",
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "example": "10",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCsvPostResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get CSV Post",
        "tags": ["CSV"]
      },
      "patch": {
        "operationId": "start-csv-finalize",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "example": "sdfdsfdsfEWEsdfsdsW32dd",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "CSV Id",
            "example": "65f92e55cc884f0d0845e447",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CSVDefaultDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CsvPostStatusResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Start CSV Finalize",
        "tags": ["CSV"]
      }
    },
    "/social-media-posting/{locationId}/posts": {
      "post": {
        "description": "Create posts for all supported platforms. It is possible to create customized posts per channel by using the same platform account IDs in a request and hitting the create post API multiple times with different summaries and account IDs per platform.\n\nThe content and media limitations, as well as platform rate limiters corresponding to the respective platforms, are provided in the following reference link:\n\n  Link: [Platform Limitations](https://help.leadconnectorhq.com/support/solutions/articles/48001240003-social-planner-image-video-content-and-api-limitations \"Social Planner Help\")",
        "operationId": "create-post",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePostSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create post",
        "tags": ["Post"]
      }
    },
    "/social-media-posting/{locationId}/posts/list": {
      "post": {
        "description": "Get Posts",
        "operationId": "get-posts",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchPostDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get posts",
        "tags": ["Post"]
      }
    },
    "/social-media-posting/{locationId}/posts/{id}": {
      "delete": {
        "description": "Delete Post",
        "operationId": "delete-post",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Post Id",
            "example": "65fac446d599990d1313c1dd",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletePostSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete Post",
        "tags": ["Post"]
      },
      "get": {
        "description": "Get post",
        "operationId": "get-post",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Post Id",
            "example": "65fac446d599990d1313c1dd",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPostSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get post",
        "tags": ["Post"]
      },
      "put": {
        "description": "Create posts for all supported platforms. It is possible to create customized posts per channel by using the same platform account IDs in a request and hitting the create post API multiple times with different summaries and account IDs per platform.\n\nThe content and media limitations, as well as platform rate limiters corresponding to the respective platforms, are provided in the following reference link:\n\n  Link: [Platform Limitations](https://help.leadconnectorhq.com/support/solutions/articles/48001240003-social-planner-image-video-content-and-api-limitations \"Social Planner Help\")",
        "operationId": "edit-post",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Post Id",
            "example": "65fac446d599990d1313c1dd",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatePostSuccessfulResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Edit post",
        "tags": ["Post"]
      }
    },
    "/social-media-posting/{locationId}/set-accounts": {
      "post": {
        "operationId": "set-accounts",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAccountsDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SetAccountsResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Set Accounts",
        "tags": ["CSV"]
      }
    },
    "/social-media-posting/{locationId}/tags": {
      "get": {
        "operationId": "get-tags-location-id",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Search text string",
            "example": "test",
            "in": "query",
            "name": "searchText",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit",
            "example": 10,
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Skip",
            "example": 0,
            "in": "query",
            "name": "skip",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTagsByLocationIdResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get tags by location id",
        "tags": ["Tag"]
      }
    },
    "/social-media-posting/{locationId}/tags/details": {
      "post": {
        "operationId": "get-tags-by-ids",
        "parameters": [
          {
            "description": "Access Token",
            "in": "header",
            "name": "Authorization",
            "required": true,
            "schema": {
              "example": "Bearer 9c48df2694a849b6089f9d0d3513efe",
              "type": "string"
            }
          },
          {
            "description": "API Version",
            "in": "header",
            "name": "Version",
            "required": true,
            "schema": {
              "enum": ["2021-07-28"],
              "type": "string"
            }
          },
          {
            "description": "Location Id",
            "example": "ve9EPM428h8vShlRW1KT",
            "in": "path",
            "name": "locationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTagsByIdResponseDTO"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestDTO"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedDTO"
                }
              }
            },
            "description": "Unauthorized"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableDTO"
                }
              }
            },
            "description": "Unprocessable Entity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get tags by ids",
        "tags": ["Tag"]
      }
    }
  },
  "servers": [
    {
      "url": "https://services.leadconnectorhq.com"
    }
  ],
  "tags": [
    {
      "description": "Documentation for Social Media Posting API",
      "name": "Social Media Posting"
    }
  ]
}
